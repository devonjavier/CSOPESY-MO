Implementing the first-fit memory allocator with round-robin scheduler

1. Show a working application emulating the first-fit memory allocator for a main memory with = 16,384 bytes of memory.
    - Set the following configuration for your latest OS emulator:
        num-cpu 2
        scheduler “rr”
        quantum-cycles 4
        batch-process-freq 1
        min-ins 100
        max-ins 100
    - Set the newest parameters for your OS emulator memory manager:
        max-overall-mem 16384
        mem-per-frame 16
        mem-per-proc 4096
2. Each process will require a fixed amount of memory. This is your mem-per-proc.
3. Each process stays in the memory during its execution. It will only be released from memory every time when it finishes execution.
4. If memory is full when a process is scheduled, it will revert back to the tail of the ready queue (no backing store).
5. For every quantum-cycles, produce a text file with the following information:
    - Timestamp
    - Number of processes in memory
    - Total external fragmentation in KB
    - An ASCII printout of the memory.
    - See mockup below:
        Timestamp: (08/06/2024 09:15:22AM)
        Number of processes in memory: 2
        Total external fragmentation in KB: 8192

        ----end---- = 16384

        16384
        P1
        12288

        8192
        P9
        4096

        ----start----- = 0

    - Explanation: The boundaries indicate the memory address limits. For every process, print its upper limit, and lower limit, following the prescribed layout. In this example, there are only 2 processes in memory. Then, there’s external fragmentation of: = 8,192 bytes.
    - Label the text file as: "memory_stamp_<qq>.txt", where qq = current quantum cycle of when the memory snapshot was taken.
6. Record the following test case:
    1. Type the "scheduler-start" command.
    2. Wait 5 seconds.
    3. Type "scheduler-stop" command
    4. Periodically use the "screen -ls" command to show scheduling information every 2 seconds.
    5. Continue until you see all processes move to finished processes.
        - If this doesn't happen in >1 minute, move to #6.
    6. Type "exit" to close your emulator.
7. Submit your text files generated by your memory allocator in a ZIP file.
 

EXPECTED RESULT: Your emulator correctly simulates a round-robin scheduler with a first-fit, flat memory allocator. There should be several processes that will finish as allocation is more than enough to hold, at most, 4 processes. Processes can move from different address spaces.

 