In file included from classes/process.cpp:5,
                 from classes/Scheduler.cpp:1,
                 from os_interface.cpp:11,
                 from main.cpp:1:
classes/ICommand.cpp: In member function 'virtual void PRINT::execute(Process&)':
classes/ICommand.cpp:41:30: error: invalid use of incomplete type 'class Process'
   41 |             uint16_t value = process.getVariable(variableName);
      |                              ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:42:41: error: invalid use of incomplete type 'class Process'
   42 |             std::cout << "[Process " << process.getProcessName() << "] "
      |                                         ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:46:41: error: invalid use of incomplete type 'class Process'
   46 |             std::cout << "[Process " << process.getProcessName() << "] "
      |                                         ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:50:41: error: invalid use of incomplete type 'class Process'
   50 |             std::cout << "[Process " << process.getProcessName() << "] "
      |                                         ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:51:49: error: invalid use of incomplete type 'class Process'
   51 |                       << "Hello world from " << process.getProcessName() << std::endl;
      |                                                 ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp: In member function 'virtual void DECLARE::execute(Process&)':
classes/ICommand.cpp:66:9: error: invalid use of incomplete type 'class Process'
   66 |         process.setVariable(variableName, value);
      |         ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:67:37: error: invalid use of incomplete type 'class Process'
   67 |         std::cout << "[Process " << process.getProcessName() << "] "
      |                                     ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp: In member function 'virtual void ADD::execute(Process&)':
classes/ICommand.cpp:104:40: error: invalid use of incomplete type 'class Process'
  104 |         uint16_t op1 = operand1IsVar ? process.getVariable(operand1Var) : operand1Value;
      |                                        ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:105:40: error: invalid use of incomplete type 'class Process'
  105 |         uint16_t op2 = operand2IsVar ? process.getVariable(operand2Var) : operand2Value;
      |                                        ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:111:9: error: invalid use of incomplete type 'class Process'
  111 |         process.setVariable(resultVar, finalResult);
      |         ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:113:37: error: invalid use of incomplete type 'class Process'
  113 |         std::cout << "[Process " << process.getProcessName() << "] "
      |                                     ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp: In member function 'virtual void SUBTRACT::execute(Process&)':
classes/ICommand.cpp:150:40: error: invalid use of incomplete type 'class Process'
  150 |         uint16_t op1 = operand1IsVar ? process.getVariable(operand1Var) : operand1Value;
      |                                        ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:151:40: error: invalid use of incomplete type 'class Process'
  151 |         uint16_t op2 = operand2IsVar ? process.getVariable(operand2Var) : operand2Value;
      |                                        ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:156:9: error: invalid use of incomplete type 'class Process'
  156 |         process.setVariable(resultVar, result);
      |         ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:158:37: error: invalid use of incomplete type 'class Process'
  158 |         std::cout << "[Process " << process.getProcessName() << "] "
      |                                     ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp: In member function 'virtual void SLEEP::execute(Process&)':
classes/ICommand.cpp:171:37: error: invalid use of incomplete type 'class Process'
  171 |         std::cout << "[Process " << process.getProcessName() << "] "
      |                                     ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:178:37: error: invalid use of incomplete type 'class Process'
  178 |         std::cout << "[Process " << process.getProcessName() << "] "
      |                                     ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp: In member function 'virtual void FOR::execute(Process&)':
classes/ICommand.cpp:193:37: error: invalid use of incomplete type 'class Process'
  193 |         std::cout << "[Process " << process.getProcessName() << "] "
      |                                     ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:197:41: error: invalid use of incomplete type 'class Process'
  197 |             std::cout << "[Process " << process.getProcessName() << "] "
      |                                         ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
classes/ICommand.cpp:207:37: error: invalid use of incomplete type 'class Process'
  207 |         std::cout << "[Process " << process.getProcessName() << "] "
      |                                     ^~~~~~~
classes/ICommand.cpp:13:7: note: forward declaration of 'class Process'
   13 | class Process;
      |       ^~~~~~~
os_interface.cpp: In function 'void generate_random_processes()':
os_interface.cpp:87:49: error: conflicting declaration 'std::uniform_int_distribution<long long unsigned int> distribution'
   87 |         std::uniform_int_distribution<uint64_t> distribution(1, (1ULL << 32));
      |                                                 ^~~~~~~~~~~~
os_interface.cpp:79:44: note: previous declaration as 'std::uniform_int_distribution<int> distribution'
   79 |         std::uniform_int_distribution<int> distribution(min_ins, max_ins);
      |                                            ^~~~~~~~~~~~
os_interface.cpp: In function 'void report_util()':
os_interface.cpp:248:32: error: 'get_timestamp' was not declared in this scope
  248 |     log << "===== Report (" << get_timestamp() << ") =====\n";
      |                                ^~~~~~~~~~~~~
In file included from C:/mingw64/include/c++/15.1.0/thread:47,
                 from os_interface.cpp:8:
C:/mingw64/include/c++/15.1.0/bits/std_thread.h: In instantiation of 'std::thread::thread(_Callable&&, _Args&& ...) [with _Callable = void (Scheduler::*)(int); _Args = {Scheduler*}; <template-parameter-1-3> = void]':
C:/mingw64/include/c++/15.1.0/bits/new_allocator.h:191:4:   required from 'void std::__new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = std::thread; _Args = {void (Scheduler::*)(int), Scheduler*}; _Tp = std::thread]'
  191 |         { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:/mingw64/include/c++/15.1.0/bits/alloc_traits.h:674:17:   required from 'static void std::allocator_traits<std::allocator<_CharT> >::construct(allocator_type&, _Up*, _Args&& ...) [with _Up = std::thread; _Args = {void (Scheduler::*)(int), Scheduler*}; _Tp = std::thread; allocator_type = std::allocator<std::thread>]'
  674 |           __a.construct(__p, std::forward<_Args>(__args)...);
      |           ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:/mingw64/include/c++/15.1.0/bits/vector.tcc:117:30:   required from 'std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {void (Scheduler::*)(int), Scheduler*}; _Tp = std::thread; _Alloc = std::allocator<std::thread>; reference = std::thread&]'
  117 |             _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
      |             ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |                                      std::forward<_Args>(__args)...);
      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
classes/Scheduler.cpp:97:39:   required from here
   97 |             workerThreads.emplace_back(&Scheduler::schedulerAlgo, this);
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:/mingw64/include/c++/15.1.0/bits/std_thread.h:168:72: error: static assertion failed: std::thread arguments must be invocable after conversion to rvalues
  168 |                                       typename decay<_Args>::type...>::value,
      |                                                                        ^~~~~
C:/mingw64/include/c++/15.1.0/bits/std_thread.h:168:72: note: 'std::integral_constant<bool, false>::value' evaluates to false
C:/mingw64/include/c++/15.1.0/bits/std_thread.h: In instantiation of 'struct std::thread::_Invoker<std::tuple<void (Scheduler::*)(int), Scheduler*> >':
C:/mingw64/include/c++/15.1.0/bits/std_thread.h:247:13:   required from 'struct std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (Scheduler::*)(int), Scheduler*> > >'
  247 |         _Callable               _M_func;
      |                                 ^~~~~~~
C:/mingw64/include/c++/15.1.0/bits/std_thread.h:175:29:   required from 'std::thread::thread(_Callable&&, _Args&& ...) [with _Callable = void (Scheduler::*)(int); _Args = {Scheduler*}; <template-parameter-1-3> = void]'
  175 |         _M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
      |                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~
  176 |               std::forward<_Callable>(__f), std::forward<_Args>(__args)...)),
      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:/mingw64/include/c++/15.1.0/bits/new_allocator.h:191:4:   required from 'void std::__new_allocator<_Tp>::construct(_Up*, _Args&& ...) [with _Up = std::thread; _Args = {void (Scheduler::*)(int), Scheduler*}; _Tp = std::thread]'
  191 |         { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:/mingw64/include/c++/15.1.0/bits/alloc_traits.h:674:17:   required from 'static void std::allocator_traits<std::allocator<_CharT> >::construct(allocator_type&, _Up*, _Args&& ...) [with _Up = std::thread; _Args = {void (Scheduler::*)(int), Scheduler*}; _Tp = std::thread; allocator_type = std::allocator<std::thread>]'
  674 |           __a.construct(__p, std::forward<_Args>(__args)...);
      |           ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:/mingw64/include/c++/15.1.0/bits/vector.tcc:117:30:   required from 'std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {void (Scheduler::*)(int), Scheduler*}; _Tp = std::thread; _Alloc = std::allocator<std::thread>; reference = std::thread&]'
  117 |             _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
      |             ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  118 |                                      std::forward<_Args>(__args)...);
      |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
classes/Scheduler.cpp:97:39:   required from here
   97 |             workerThreads.emplace_back(&Scheduler::schedulerAlgo, this);
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:/mingw64/include/c++/15.1.0/bits/std_thread.h:302:11: error: no type named 'type' in 'struct std::thread::_Invoker<std::tuple<void (Scheduler::*)(int), Scheduler*> >::__result<std::tuple<void (Scheduler::*)(int), Scheduler*> >'
  302 |           _M_invoke(_Index_tuple<_Ind...>)
      |           ^~~~~~~~~
C:/mingw64/include/c++/15.1.0/bits/std_thread.h:306:9: error: no type named 'type' in 'struct std::thread::_Invoker<std::tuple<void (Scheduler::*)(int), Scheduler*> >::__result<std::tuple<void (Scheduler::*)(int), Scheduler*> >'
  306 |         operator()()
      |         ^~~~~~~~
os_interface.cpp: In function 'ICommand* generateRandomInstruction()':
os_interface.cpp:67:1: warning: control reaches end of non-void function [-Wreturn-type]
   67 | }
      | ^
